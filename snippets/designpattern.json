{
    "-> Creational::Singleton": {
        "prefix": "singleton",
        "body": [
            "class Singleton {",
            "\tprivate static readonly Lazy<Singleton> _instance = new Lazy<Singleton>(() => new Singleton());",
            "\tpublic static Singleton Instance => _instance.Value;",
            "\tprivate Singleton() { }",
            "}"
        ],
        "description": "Creational design pattern singleton"
    },
    "-> Creational::Factory Method": {
        "prefix": "factoryMethod",
        "body": [
            "public abstract class Creator {",
            "\tpublic abstract IProduct FactoryMethod();",
            "\tpublic string SomeOperation() {",
            "\t\tvar product = FactoryMethod();",
            "\t\treturn $\"Creator: The same creator's code has just worked with {product.Operation()}\";",
            "\t}",
            "}",
            "",
            "public class ConcreteCreator1 : Creator {",
            "\tpublic override IProduct FactoryMethod() => new ConcreteProduct1();",
            "}",
            "",
            "public class ConcreteCreator2 : Creator {",
            "\tpublic override IProduct FactoryMethod() => new ConcreteProduct2();",
            "}",
            "",
            "public interface IProduct {",
            "\tstring Operation();",
            "}",
            "",
            "public class ConcreteProduct1 : IProduct {",
            "\tpublic string Operation() => \"Result of ConcreteProduct1\";",
            "}",
            "",
            "public class ConcreteProduct2 : IProduct {",
            "\tpublic string Operation() => \"Result of ConcreteProduct2\";",
            "}"
        ],
        "description": "Creational design pattern factory method"
    },
    "-> Structural::Adapter": {
        "prefix": "adapter",
        "body": [
            "public interface ITarget {",
            "\tstring GetRequest();",
            "}",
            "",
            "public class Adaptee {",
            "\tpublic string GetSpecificRequest() {",
            "\t\treturn 'Specific Request.';",
            "\t}",
            "}",
            "",
            "public class Adapter : ITarget {",
            "\tprivate readonly Adaptee _adaptee;",
            "\tpublic Adapter(Adaptee adaptee) {",
            "\t\tthis._adaptee = adaptee;",
            "\t}",
            "",
            "\tpublic string GetRequest() {",
            "\t\treturn $'This is {this._adaptee.GetSpecificRequest()}';",
            "\t}",
            "}"
        ],
        "description": "Structural design pattern adapter"
    },
    "-> Behavioral::Observer": {
        "prefix": "observer",
        "body": [
            "public interface IObserver {",
            "\tvoid Update(Subject subject);",
            "}",
            "",
            "public interface ISubject {",
            "\tevent Action<Subject> OnChange;",
            "\tvoid Notify();",
            "}",
            "",
            "public class Subject : ISubject {",
            "\tpublic int State { get; private set; } = -1;",
            "\tpublic event Action<Subject>? OnChange;",
            "",
            "\tpublic void Notify() {",
            "\t\tConsole.WriteLine(\"Subject: Notifying observers...\");",
            "\t\tOnChange?.Invoke(this);",
            "\t}",
            "",
            "\tpublic void SomeBusinessLogic() {",
            "\t\tConsole.WriteLine(\"Subject: I'm doing something important.\");",
            "\t\tState = new Random().Next(0, 10);",
            "\t\tThread.Sleep(15);",
            "\t\tConsole.WriteLine($\"Subject: My state has just changed to: {State}\");",
            "\t\tNotify();",
            "\t}",
            "}",
            "",
            "public class ConcreteObserverA : IObserver {",
            "\tpublic void Update(Subject subject) {",
            "\t\tif (subject.State < 3) {",
            "\t\t\tConsole.WriteLine(\"ConcreteObserverA: Reacted to the event.\");",
            "\t\t}",
            "\t}",
            "}",
            "",
            "public class ConcreteObserverB : IObserver {",
            "\tpublic void Update(Subject subject) {",
            "\t\tif (subject.State == 0 || subject.State >= 2) {",
            "\t\t\tConsole.WriteLine(\"ConcreteObserverB: Reacted to the event.\");",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "Behavioral design pattern observer"
    }
}
