{
    "-> Creational::Singleton": {
        "prefix": "singleton",
        "body": [
            "// class Singleton {",
            "//\t\tprivate static Singleton _instance = null;",
            "//\t\tpublic static Singleton GetInstance() {",
            "//\t\t\tif (_instance == null) {",
            "//\t\t\t\t_instance = new Singleton();",
            "//\t\treturn _instance;",
            "//\t\t}",
            "//}"
        ],
        "description": "Creational design pattern singleton"
    },
    "-> Creational::Factory Method": {
        "prefix": "factoryMethod",
        "body": [
            "// abstract class Creator {",
            "//\t\tpublic abstract IProduct FactoryMethod();",
            "//\t\tpublic string SomeOperation() {",
            "//\t\t\tvar product = FactoryMethod();",
            "//\t\t\tvar result = \"Creator: The same creator's code has just worked with + product.Operation();",
            "//\t\t\treturn result;",
            "// }",
            " ",
            "// class ConcreteCreator1 : Creator {",
            "//\t\tpublic override IProduct FactoryMethod() {",
            "// return new ConcreteProduct1();",
            "// }",
            " ",
            "// class ConcreteCreator2 : Creator {",
            "//\t\tpublic override IProduct FactoryMethod() {",
            "// return new ConcreteProduct2();",
            "// }",
            " ",
            "// public interface IProduct {",
            "//\t\tstring Operation()",
            "// }",
            " ",
            "// class ConcreteProduct1 : IProduct {",
            "//\t\tpublic string Operation() {",
            "// return {Result of concreteProduct1};",
            "// }",
            " ",
            "// class ConcreteProduct2 : IProduct {",
            "//\t\tpublic string Operation() {",
            "// return {Result of concreteProduct2};",
            "// }"
        ],
        "description": "Creational design pattern factory method"
    },
    "-> Structural::Adapter": {
        "prefix": "adapter",
        "body": [
            "// public interface ITarget {",
            "//\t\tstring GetRequest();",
            "//}",
            " ",
            "// public class Adaptee {",
            "//\t\tpublic string GetSpecificRequest() {",
            "//\t\t\treturn 'Specific Request.'",
            "//\t\t}",
            "//}",
            " ",
            "// public class Adapter : ITarget {",
            "//\t\tprivate readonly Adaptee _adaptee;",
            "//\t\tpublic Adapter(Adaptee adaptee) {",
            "//\t\t\tthis._adaptee = adaptee;",
            "//\t\t}",
            " ",
            "//\t\tpublic string GetRequest() {",
            "//\t\t\treturn $'This is {this._adaptee.GetSpecificRequest()};'",
            "//\t\t}",
            "//}"
        ],
        "description": "Structural design pattern adapter"
    },
    "-> Behavioral::Observer": {
        "prefix": "observer",
        "body": [
            "// public interface IObserver {",
            "//\t\tvoid Update(ISubject subject);",
            "//}",
            " ",
            "// public interface ISubject {",
            "//\t\tvoid Attach(IObserver observer);",
            "//\t\tvoid Detach(IObserver observer);",
            "//\t\tvoid Notify();",
            "//}",
            " ",
            "// public class Subject : ISubject {",
            "//\t\tpublic int State { get; set; } = -0;",
            "//\t\tprivate List<IObserver> _observers = new List<IObserver>();",
            "// public void Attach(IObserver observer) {",
            "//\t\tConsole.WriteLine('Subject: Attached an observer.');",
            "//\t\tthis._observers.Add(observer);",
            "//}",
            " ",
            "// public void Detach(IObserver observer) {",
            "//\t\tthis._observers.Remove(observer);",
            "//\t\tConsole.WriteLine('Subject: Detached an observer.');",
            "//}",
            " ",
            "// public void Notify() {",
            "//\t\tConsole.WriteLine('Subject: Notifying observers...');",
            "//\t\tforeach (var observer in _observers) {",
            "//\t\t\tobserver.Update(this);",
            "//\t\t}",
            "// }",
            " ",
            "// public void SomeBusinessLogic() {",
            "//\t\tConsole.WriteLine('Subject: I'm doing something important.');",
            "//\t\tthis.State = new Random().Next(0,10);",
            "//\t\tThread.Sleep(15);",
            "//\t\tConsole.WriteLine('Subject: My state has just changed to: ' + this.State);",
            "//\t\tthis.Notify();",
            "// }",
            "//}",
            " ",
            "// class ConcreteObserverA : IObserver {",
            "//\t\tpublic void Update(ISubject subject) {",
            "//\t\t\tif ((subject as Subject).State < 3) {",
            "//\t\t\t\tConsole.WriteLine('ConcreteObserverA: Reacted to the event.');",
            "//\t\t\t}",
            "//\t\t}",
            "// }",
            "// class ConcreteObserverB : IObserver {",
            "//\t\tpublic void Update(ISubject subject) {",
            "//\t\t\tif ((subject as Subject).State == 0 || (subject as Subject).State >= 2) {",
            "//\t\t\t\tConsole.WriteLine('ConcreteObserverB: Reacted to the event.');",
            "//\t\t\t}",
            "//\t\t}",
            "// }"
        ],
        "description": "Behavioral design pattern observer"
    }
}
